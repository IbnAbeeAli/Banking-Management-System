package databaseproject;
import java.sql.*;
import java.awt.Image;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author waniya_mustafa
 */
public class transferMoneyFrame extends javax.swing.JFrame {

    int accountID, customerID, userloginid;

    /**
     * Creates new form transferMoneyFrame
     */
    public transferMoneyFrame(int accountid, int customerid, int userloginid) {
        initComponents();
        ImageIcon background_img = new ImageIcon("C:\\Users\\DELL\\Documents\\NetBeansProjects\\DatabaseProject\\src\\databaseproject\\TransferMoney.jpg", "");
        Image img = background_img.getImage();
        Image temp_img = img.getScaledInstance(950, 695, Image.SCALE_SMOOTH);
        background_img = new ImageIcon(temp_img);
        JLabel backgrnd = new JLabel("", background_img, JLabel.CENTER);
        backgrnd.setBounds(0, 0, 950, 695);
        this.add(backgrnd);
        transferMoneyBtn.setOpaque(true);
        this.accountID = accountid;
        this.customerID = customerid;
        this.userloginid = userloginid;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        receiverAcct = new javax.swing.JTextField();
        transferMoneyBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        transferAmount = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arima Madurai", 1, 22)); // NOI18N
        jLabel1.setForeground(java.awt.Color.white);
        jLabel1.setText("To Account");

        receiverAcct.setBackground(new java.awt.Color(204, 204, 204));
        receiverAcct.setFont(new java.awt.Font("Arima Madurai", 0, 18)); // NOI18N
        receiverAcct.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 153, 153), 3, true));
        receiverAcct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receiverAcctActionPerformed(evt);
            }
        });

        transferMoneyBtn.setBackground(new java.awt.Color(0, 153, 153));
        transferMoneyBtn.setFont(new java.awt.Font("Arima Madurai", 1, 18)); // NOI18N
        transferMoneyBtn.setForeground(new java.awt.Color(255, 255, 255));
        transferMoneyBtn.setText("Transfer");
        transferMoneyBtn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(239, 121, 138), 3, true));
        transferMoneyBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        transferMoneyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transferMoneyBtnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arima Madurai", 1, 22)); // NOI18N
        jLabel3.setForeground(java.awt.Color.white);
        jLabel3.setText("Amount");

        transferAmount.setBackground(new java.awt.Color(204, 204, 204));
        transferAmount.setFont(new java.awt.Font("Arima Madurai", 0, 18)); // NOI18N
        transferAmount.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 153, 153), 3, true));
        transferAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transferAmountActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(617, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(receiverAcct)
                            .addComponent(transferAmount, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(79, 79, 79))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(transferMoneyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(139, 139, 139))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(129, 129, 129)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(receiverAcct, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(transferAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(transferMoneyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(268, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void receiverAcctActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receiverAcctActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_receiverAcctActionPerformed

    private void transferMoneyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transferMoneyBtnActionPerformed
        // TODO add your handling code here:
        checkTransferCredentials();
    }//GEN-LAST:event_transferMoneyBtnActionPerformed

    private void transferAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transferAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_transferAmountActionPerformed

    /**
     * @param args the command line arguments
     */
    void checkTransferCredentials() {

        try {
            //selecting account from userloginid
            String user = "root";
            String password = "seecs@123";

            //Getting connection to the database
            Connection myCon = DriverManager.getConnection("jdbc:mysql://localhost:3306/project", user, password);
            // Creating a statement
            Statement myStmt = myCon.createStatement();
            ResultSet myrs;

            String recieverAccount = this.receiverAcct.getText();
            int transferAmount = Integer.parseInt(this.transferAmount.getText());
            
            //Write Query to check whether this account exist
            myrs = myStmt.executeQuery("select currentbalance from account where accountid = " + recieverAccount);
            if (!myrs.next()) {
                JOptionPane.showMessageDialog(null, "Invalid Reciever Account Number entered");
                throw new Exception();
            }
            System.out.println("Checkpoint1 reached");
            //Writing query to check whether the amount is less than transfer
            myrs = myStmt.executeQuery("select currentbalance from account where accountid = " + this.accountID);
            int oldAmount = 0; //write query to retreive the old amount
            if (myrs.next())
            oldAmount = myrs.getInt("currentbalance");
            
            if ((oldAmount < transferAmount)){
                JOptionPane.showMessageDialog(null, "Not Enough Balance");
                throw new Exception();
            }
            System.out.println("Checkpoint2 reached");
            
            int newAmount = oldAmount -  transferAmount;
            //Write query to update the amount
            String query = "update account set currentbalance = " + newAmount + " where accountid = " + this.accountID;
            System.out.println("newAmount" +newAmount + "   account id: " + this.accountID);
            
            myStmt.executeUpdate(query);
            System.out.println("Transaction to different account performed");
            
            System.out.println("Checkpoint 3");
//            
            //write query to retreive old amount from that account
            myrs = myStmt.executeQuery("select currentbalance from account where accountid = " + recieverAccount);
            if (myrs.next())
                oldAmount = myrs.getInt("currentbalance");
            
            transferAmount = Integer.parseInt(this.transferAmount.getText());
            newAmount = transferAmount + oldAmount;
            System.out.println("CheckPoint4");
            //Write query to update the amount
            myStmt.executeUpdate("update account set currentbalance = " + newAmount + " where accountid = " + recieverAccount);
            System.out.println("Transaction to different account performed");
            System.out.println("Checkpoint4");
          
            
            //Query to update the transaction log
            query = "INSERT INTO `project`.`transactionlog`" +
                     "(`TransactionDate`,`TransactionTypeID`,`TransactionAmount`,`AccountID`,`toaccountid`,`CustomerID`,`UserLoginID`)" +
                     "VALUES" +
                     "(CURRENT_TIMESTAMP()," + 3 + "," + transferAmount + "," + this.accountID + "," + recieverAccount + "," + this.customerID + "," + this.userloginid + ");";
            
            myStmt.executeUpdate(query);
            dispose();
            String dialog = "Transaction Performed Successfully!\n" + 
                            "From Account: " + this.accountID + " to " + recieverAccount +
                            " of Rs. " + transferAmount;
            JOptionPane.showMessageDialog(null, dialog);
            MainMenuFrame mm1 = new MainMenuFrame(this.userloginid);
            mm1.setVisible(true);
            
            
            
        }
        catch (Exception e) {
            dispose();
            JOptionPane.showMessageDialog(null, "Error Occured in the Transaction");
            MainMenuFrame mm1 = new MainMenuFrame(this.userloginid);
            mm1.setVisible(true);
            e.printStackTrace();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField receiverAcct;
    private javax.swing.JTextField transferAmount;
    private javax.swing.JButton transferMoneyBtn;
    // End of variables declaration//GEN-END:variables
}
